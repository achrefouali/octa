# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: settings.yml }

parameters:
    locale: 'fr'
    hotels_directory: '%kernel.root_dir%/../public/uploads/hotels/'
    hotels_packages_directory: '%kernel.root_dir%/../public/uploads/hotels/packages/'
    configuration_directory: '%kernel.root_dir%/../public/uploads/configuration/'
    events_directory: '%kernel.root_dir%/../public/uploads/events/'
    documents_directory: '%kernel.root_dir%/../public/uploads/documents/'
    videos_directory: '%kernel.root_dir%/../public/uploads/videos/'
    images_directory: '%kernel.root_dir%/../public/uploads/images/'
    intervenants_directory: '%kernel.root_dir%/../public/uploads/intervenants/'
    programmes_directory: '%kernel.root_dir%/../public/uploads/programmes/'
    sponsors_directory: '%kernel.root_dir%/../public/uploads/sponsors/'
    terms_directory: '%kernel.root_dir%/../public/uploads/terms/'
    pdf_directory: '%kernel.root_dir%/../public/uploads/pdf/'
    event_pdf_directory: '%kernel.root_dir%/../public/uploads/reservation_event/'
    hotel_pdf_directory: '%kernel.root_dir%/../public/uploads/reservation_hotel/'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Twig,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.participant.voter:
        class: App\Security\Authorization\ParticipantVoter
        arguments: ["@security.access.decision_manager"]
        tags:
        - { name: security.voter }

    app.fixtures.roleHierarchy:
        class: App\DataFixtures\ORM\LoadRoleHierarchy
        calls:
        - [setContainer,["@service_container"]]
        tags:
        - { name: doctrine.fixture.orm }

    app.fixtures.participant:
        class: App\DataFixtures\ORM\LoadParticipant
        calls:
        - [setContainer,["@service_container"]]
        tags:
        - { name: doctrine.fixture.orm }

    app.fixtures.participant.type:
        class: App\DataFixtures\ORM\LoadParticipantType
        calls:
        - [setContainer,["@service_container"]]
        tags:
        - { name: doctrine.fixture.orm }

    app.fixtures.notification:
        class: App\DataFixtures\ORM\LoadNotification
        calls:
        - [setContainer,["@service_container"]]
        tags:
        - { name: doctrine.fixture.orm }


    app.participant.provider:
        class: App\Security\Providers\ParticipantProvider
        calls:
        - [setEntityManager, ["@doctrine.orm.entity_manager"]]


    app.twig.hotel.package.price:
        class: App\Twig\Extension\HotelPackagePrice
        arguments: ["@service_container"]
        public: true
        tags:
        - { name: twig.extension }

    application_notification_service:
        class: App\Services\NotificationService
        arguments: ['@doctrine.orm.entity_manager', '@application.crud']
    application_postPersist.event_listner:
        class: App\EventListener\EventListener
        tags:
            - { name: doctrine.event_listener, event: postPersist }
    application_notification.event_listener:
        class: App\EventListener\NotificationListener
        arguments: ['@application.mailer', '@application_notification_service']
        tags:
        - { name: kernel.event_listener, event: application.notification, method: onNotify }

    application_notification.voter:
        class:     App\Security\Authorization\NotificationVoter
        arguments: ["@security.access.decision_manager"]
        public:    false
        tags:
        - { name: security.voter }


    application.crud:
        class: App\Services\CrudService
        arguments: ["@service_container"]

    application.mailer:
        class: App\Services\MailerManager
        arguments: ["@mailer" ]
        calls:
        - [setContainer,["@service_container"]]
    application.mailer.reservation:
        class: App\Services\MailerResevationManager
        arguments: ["@mailer"]
        public : true
        calls:
        - [setContainer,["@service_container"]]
    application.export:
        class: App\Services\ExportService


    app_user.access.role_hierarchy_voter:
        class:        Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter
        arguments:    ["@app_user.access.role_hierarchy"]
        tags:
        -  { name: security.voter, priority: 245 }

    security.access.expression_voter:
        class:        Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter
        arguments:    ["@security.expression_language", "@security.authentication.trust_resolver", "@app_user.access.role_hierarchy"]
        tags:
        -  { name: security.voter, priority: 245 }

    app_user.access.role_hierarchy:
        class:        App\Security\Roles\RoleHierarchy
        arguments:    ["@doctrine.orm.entity_manager"]
        tags:
        -  { name: form.type, alias: app_user_user }
